### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AirflowImage {
  channel: String!
  tag: String!
  version: String!
}

type AppConfig {
  baseDomain: String
  manualReleaseNames: Boolean
  smtpConfigured: Boolean
  version: String
}

type AstroUnit {
  actualConns: Float!
  airflowConns: Float!
  cpu: Int!
  memory: Int!
  pods: Float!
  price: Float!
}

type AuthConfig {
  externalSignupUrl: String
  initialSignup: Boolean
  localEnabled: Boolean
  providers: [AuthProvider!]!
  publicSignup: Boolean
}

type AuthProvider {
  displayName: String
  name: String!
  url: String!
}

type AuthUser {
  authUserCapabilities: AuthUserCapabilities
  isAdmin: Boolean
  permissions: JSON
  token: Token
  user: User
}

type AuthUserCapabilities {
  canSysAdmin: Boolean
}

type Card {
  billingEmail: String
  brand: String
  company: String
  expMonth: Int!
  expYear: Int!
  last4: String!
  name: String
}

scalar DateTime

type DeployInfo {
  current: String
  nextCli: String
}

type Deployment {
  airflowVersion: String
  alertEmails: [String!]!
  config: JSON
  createdAt: DateTime!
  deployInfo: DeployInfo
  deploymentCapabilities: DeploymentCapabilities
  description: String
  env: JSON
  id: String!
  label: String
  properties: JSON
  releaseName: String
  roleBindings: [RoleBinding!]!
  status: String
  type: String
  updatedAt: DateTime!
  urls: [DeploymentUrl!]
  version: String
  workspace: Workspace
}

type DeploymentCapabilities {
  canCreateServiceAccount: Boolean
  canDeleteDeployment: Boolean
  canDeleteServiceAccount: Boolean
  canDeploy: Boolean
  canUpdateDeployment: Boolean
  canUpdateServiceAccount: Boolean
}

type DeploymentConfig {
  airflowImages: [AirflowImage!]!
  airflowVersions: JSON
  astroUnit: AstroUnit!
  defaultAirflowChartVersion: String!
  defaultAirflowImageTag: String!
  defaults: JSON!
  executors: JSON!
  latestVersion: String!
  limits: JSON!
  loggingEnabled: Boolean!
  maxExtraAu: Int
  singleNamespace: Boolean!
}

type DeploymentLog {
  result: JSON!
}

type DeploymentMetric {
  label: String
  result: JSON!
}

type DeploymentStatus {
  result: JSON!
}

type DeploymentUrl {
  type: String
  url: String
}

input DeploymentWhereUniqueInput {
  id: String
  releaseName: String
}

type DockerImage {
  createdAt: DateTime!
  deployment: Deployment!
  digest: String!
  env: String!
  id: String!
  labels: String!
  name: String
  tag: String!
}

type Email {
  address: String
  createdAt: DateTime!
  id: String!
  primary: Boolean
  token: String
  updatedAt: DateTime!
  user: User!
  verified: Boolean
}

input EmailWhereUniqueInput {
  address: String
  id: String
  token: String
}

enum EntityType {
  DEPLOYMENT
  SYSTEM
  WORKSPACE
}

type Invite {
  assignments: String!
  createdAt: String!
  email: String
  id: String!
  role: String!
  token: String
  updatedAt: String!
  uuid: String!
}

input InviteSearch {
  email: String
  inviteUuid: Uuid
}

type InviteToken {
  createdAt: DateTime!
  email: String!
  id: String!
  role: String
  token: String!
  updatedAt: DateTime!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LocalCredential {
  createdAt: DateTime!
  id: String!
  password: String
  resetToken: String
  updatedAt: DateTime!
  user: User!
}

enum MetricType {
  DEPLOYMENT_DATABASE
  DEPLOYMENT_QUOTAS
  DEPLOYMENT_SCHEDULER
  DEPLOYMENT_STATUS
  DEPLOYMENT_TASKS
  DEPLOYMENT_USAGE
}

type Mutation {
  addCard(billingEmail: String, company: String, token: String, workspaceUuid: Uuid): Card!
  addCustomerId(stripeCustomerId: String, workspaceUuid: Uuid): Workspace!
  confirmEmail(duration: Int, token: String): AuthUser!
  createDeployment(airflowVersion: String, cloudRole: String, config: JSON, description: String, env: JSON, label: String, properties: JSON, releaseName: String, type: String, version: String, workspaceUuid: Uuid): Deployment!
  createDeploymentServiceAccount(category: String, deploymentUuid: Uuid, label: String, role: Role): ServiceAccount!
  createServiceAccount(category: String, entityType: EntityType, entityUuid: Uuid, label: String, role: Role): ServiceAccount!
  createSystemRoleBinding(role: Role, userId: ID): RoleBinding!
  createSystemServiceAccount(category: String, label: String, role: Role): ServiceAccount!
  createToken(duration: Int, identity: String, password: String): AuthUser!
  createUser(duration: Int, email: String!, inviteToken: String, password: String!, profile: JSON, username: String): AuthUser
  createWorkspace(description: String, isSuspended: Boolean, label: String, trialEndsAt: String): Workspace!
  createWorkspaceServiceAccount(category: String, label: String, role: Role, workspaceUuid: Uuid): ServiceAccount!
  deleteDeployment(deploymentUuid: Uuid): Deployment!
  deleteDeploymentServiceAccount(deploymentUuid: Uuid, serviceAccountUuid: Uuid): ServiceAccount!
  deleteInviteToken(inviteUuid: Uuid): Invite!
  deleteServiceAccount(serviceAccountUuid: Uuid): ServiceAccount!
  deleteSystemRoleBinding(role: Role, userId: ID): RoleBinding!
  deleteSystemServiceAccount(serviceAccountUuid: Uuid): ServiceAccount!
  deleteWorkspace(workspaceUuid: Uuid): Workspace!
  deleteWorkspaceServiceAccount(serviceAccountUuid: Uuid, workspaceUuid: Uuid): ServiceAccount!
  deploymentAlertsUpdate(alertEmails: [String!], deploymentUuid: Uuid): Deployment!
  extendWorkspaceTrial(extraDays: Int, workspaceUuid: Uuid): Workspace!
  forgotPassword(email: String): Boolean!
  inviteUser(email: String): Invite!
  removeUser(userUuid: Uuid): User!
  resendConfirmation(email: String): Boolean!
  resetPassword(duration: Int, password: String, token: String): AuthUser!
  suspendWorkspace(isSuspended: Boolean, workspaceUuid: Uuid): Workspace!
  updateCard(billingEmail: String, company: String, token: String, workspaceUuid: Uuid): Card!
  updateDeployment(cloudRole: String, config: JSON, deploymentUuid: Uuid, env: JSON, payload: JSON, sync: Boolean): Deployment!
  updateDeploymentServiceAccount(deploymentUuid: Uuid, payload: JSON, serviceAccountUuid: Uuid): ServiceAccount!
  updateServiceAccount(payload: JSON, serviceAccountUuid: Uuid): ServiceAccount!
  updateUser(payload: JSON, userId: Uuid): User!
  updateWorkspace(payload: JSON, workspaceUuid: Uuid): Workspace!
  updateWorkspaceServiceAccount(payload: JSON, serviceAccountUuid: Uuid, workspaceUuid: Uuid): ServiceAccount!
  upgradeDeployment(deploymentUuid: Uuid, version: String): Deployment!
  verifyEmail(email: String): Boolean!
  workspaceAddUser(email: String, role: Role = WORKSPACE_VIEWER, workspaceUuid: Uuid): Workspace!
  workspaceRemoveUser(userUuid: Uuid, workspaceUuid: Uuid): Workspace!
  workspaceUpdateUserRole(email: String, role: Role, workspaceUuid: Uuid): Role!
}

enum Operator {
  AND
  OR
}

type PlatformRelease {
  createdAt: DateTime!
  description: String
  id: String!
  level: String
  releaseDate: DateTime!
  updatedAt: DateTime!
  url: String
  version: String
}

type Query {
  appConfig: AppConfig
  authConfig(duration: Int, extras: JSON, inviteToken: String, redirect: String): AuthConfig!
  card(stripeCustomerId: String, workspaceUuid: Uuid!): Card!
  deployment(where: DeploymentWhereUniqueInput!): Deployment
  deploymentConfig(deploymentUuid: Uuid, type: String, version: String, workspaceUuid: Uuid): DeploymentConfig!
  deployments: [Deployment!]
  deploymentServiceAccount(deploymentUuid: Uuid!, serviceAccountUuid: Uuid!): ServiceAccount!
  deploymentServiceAccounts(deploymentUuid: Uuid!): [ServiceAccount!]
  email(where: EmailWhereUniqueInput!): Email
  invites(invite: InviteSearch): [Invite!]
  self: AuthUser!
  serviceAccounts(entityType: EntityType!, entityUuid: Uuid, serviceAccountUuid: Uuid): [ServiceAccount!]
  updateAvailable: PlatformRelease
  users(user: UserSearch): [User!]!
  workspace(workspaceUuid: Uuid!): Workspace
  workspaceDeployment(releaseName: String!, workspaceUuid: Uuid!): Deployment
  workspaceDeployments(releaseName: String, workspaceUuid: Uuid!): [Deployment!]
  workspaceInvites(invite: InviteSearch, workspaceUuid: Uuid!): [InviteToken!]
  workspaces: [Workspace!]
  workspaceServiceAccount(serviceAccountUuid: Uuid!, workspaceUuid: Uuid!): ServiceAccount
  workspaceServiceAccounts(workspaceUuid: Uuid!): [ServiceAccount!]
  workspaceUser(user: UserSearch!, workspaceUuid: Uuid!): User
  workspaceUsers(user: UserSearch, workspaceUuid: Uuid!): [User!]
}

enum Role {
  DEPLOYMENT_ADMIN
  DEPLOYMENT_EDITOR
  DEPLOYMENT_VIEWER
  SYSTEM_ADMIN
  SYSTEM_EDITOR
  SYSTEM_VIEWER
  USER
  WORKSPACE_ADMIN
  WORKSPACE_EDITOR
  WORKSPACE_VIEWER
}

type RoleBinding {
  createdAt: DateTime!
  deployment: Deployment
  id: String!
  role: String
  serviceAccount: ServiceAccount
  user: User!
  workspace: Workspace
}

type ServiceAccount {
  active: Boolean
  apiKey: String
  category: String
  createdAt: DateTime!
  deploymentUuid: Uuid
  entityType: String!
  entityUuid: Uuid
  id: String!
  label: String
  lastUsedAt: DateTime
  roleBinding: RoleBinding!
  updatedAt: DateTime!
  workspaceUuid: Uuid
}

type Subscription {
  deploymentStatus(releaseName: String): DeploymentStatus!
  log(component: String, deploymentUuid: Uuid!, search: String, timestamp: String): DeploymentLog!
  metrics(deploymentUuid: Uuid!, metricType: [MetricType!], since: Int, step: Int): DeploymentMetric!
}

type Token {
  payload: TokenPayload
  value: String
}

type TokenPayload {
  exp: Int
  iat: Int
  uuid: Uuid
}

type User {
  createdAt: DateTime!
  emails: [Email!]
  fullName: String
  id: String!
  profile: [UserProp!]!
  roleBindings: [RoleBinding!]!
  status: String
  updatedAt: DateTime!
  username: String
}

type UserProp {
  category: String
  key: String
  value: String
}

input UserSearch {
  email: String
  fullName: String
  usereUuid: Uuid
  username: String
}

scalar Uuid

type Workspace {
  active: Boolean
  billingEnabled: Boolean
  createdAt: DateTime!
  deployments: [Deployment!]
  description: String
  id: String!
  invites: Invite!
  label: String
  paywallEnabled: Boolean
  properties: JSON
  roleBindings: [RoleBinding!]!
  stripeCustomerId: String
  trialEndsAt: String
  updatedAt: DateTime!
  users: [User!]
  uuid: Uuid
  workspaceCapabilities: WorkspaceCapabilities
}

type WorkspaceCapabilities {
  canCreateDeployment: Boolean
  canCreateServiceAccount: Boolean
  canDeleteServiceAccount: Boolean
  canDeleteUser: Boolean
  canDeleteWorkspace: Boolean
  canInviteUser: Boolean
  canUpdateBilling: Boolean
  canUpdateIAM: Boolean
  canUpdateServiceAccount: Boolean
  canUpdateUser: Boolean
  canUpdateWorkspace: Boolean
}

input WorkspaceWhereUniqueInput {
  id: String
}
