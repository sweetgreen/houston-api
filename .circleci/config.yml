version: 2.1
jobs:
  build:
    executor: docker-executor
    steps:
      - docker-build:
          image_name: ap-houston-api
  test:
    docker:
      - image: node:13-buster
        environment:
          PRISMA__ENDPOINT: "http://prisma:4466/houston"
          PRISMA__DEBUG: "false"
          NATS_HOST: "nats"
          NATS_PORT: 4222
      - image: postgres
        name: postgres
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      - image: nats-streaming:0.17.0
        name: nats
        environment:
          port: 4222
          http: 8222
    steps:
      - test
  scan:
    executor: clair-scanner/default
    steps:
      - clair-scan:
          image_name: ap-houston-api
  scan-trivy:
    docker:
      - image: docker:18.09-git
    steps:
      - trivy-scan:
          image_name: ap-houston-api
  publish-main:
    executor: docker-executor
    steps:
      - push:
          comma_separated_tags: "main,latest"
          image_name: ap-houston-api
  publish-release-branch:
    executor: docker-executor
    steps:
      - push:
          comma_separated_tags: "$CIRCLE_BRANCH"
          image_name: ap-houston-api
  release:
    executor: docker-executor
    steps:
      - checkout
      - get-next-tag:
          image_name: ap-houston-api
      - push:
          comma_separated_tags: "$NEXT_TAG,$CIRCLE_BRANCH"
          image_name: ap-houston-api
      # Publish a GitHub release on this repository,
      # automatically generating a change log.
      - publish-github-release
workflows:
  version: 2.1
  build-images:
    jobs:
      - test
      - build
      - scan-trivy:
          requires:
            - build
      - scan:
          requires:
            - build
      - publish-main:
          requires:
            - scan
            - scan-trivy
          filters:
            branches:
              only: main
      - publish-release-branch:
          requires:
            - test
            - build
          filters:
            branches:
              only: '/release-.*/'
      - approve-release:
          type: approval
          requires:
            - test
            - build
          filters:
            branches:
              only: '/release-.*/'
      - release:
          requires:
            - approve-release
          filters:
            branches:
              only: '/release-.*/'
orbs:
  clair-scanner: ovotech/clair-scanner@1.6.0
  codecov: codecov/codecov@1.0.2
executors:
  docker-executor:
    environment:
      GIT_ORG: astronomer
      DOCKER_REPO: astronomerinc
    docker:
      - image: circleci/python:3
commands:
  docker-build:
    description: "Build a Docker image"
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      path:
        type: string
        default: "."
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build the Docker image
          command: |
            set -xe
            image_name="<< parameters.image_name >>"
            docker build -t $image_name --file << parameters.path>>/<< parameters.dockerfile >> --build-arg BUILD_NUMBER=${CIRCLE_BUILD_NUM} << parameters.path >>
            docker save -o << parameters.image_name >>.tar $image_name
      - persist_to_workspace:
          root: .
          paths:
            - './*.tar'
  test:
    description: "Run tests and code coverage"
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Wait for db
          command: dockerize -wait tcp://postgres:5432 -timeout 1m
      - run:
          name: Wait for NATs
          command: dockerize -wait tcp://nats:4222 -timeout 1m
      - run:
          name: Install Dependencies
          command: |
            yarn install
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
      - run:
          name: Run lint
          command: |
            yarn lint
      - run: sudo apt install nmap -y
      - run: nmap -v -A localhost
      - run:
          name: Run unit tests
          command: |
            yarn coverage --runInBand
      - codecov/upload:
          file: coverage/*.json
          flags: api
  trivy-scan:
    description: "Trivy: Vulnerability scanner a Docker image"
    parameters:
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/<< parameters.image_name >>.tar
      - run:
          name: Install trivy
          command: |
            apk add --update-cache --upgrade curl rpm
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
      - restore_cache:
          keys:
            - trivy-cache
      - run:
          name: Scan the local image with trivy
          command: |
            trivy --ignorefile trivyignore --cache-dir /tmp/workspace/trivy-cache --ignore-unfixed -s HIGH,CRITICAL --exit-code 1 --no-progress << parameters.image_name >>
      - save_cache:
          key: trivy-cache
          paths:
            - /tmp/workspace/trivy-cache
  clair-scan:
    description: "Vulnerability scan a Docker image"
    parameters:
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Move tarball to directory for scan
          command: mkdir /tmp/tarballs && mv /tmp/workspace/<< parameters.image_name >>.tar /tmp/tarballs/
      - clair-scanner/scan:
          docker_tar_dir: /tmp/tarballs
  push:
    description: "Push a Docker image to DockerHub"
    parameters:
      comma_separated_tags:
        type: string
        default: latest
      docker_repository:
        type: string
        default: $DOCKER_REPO
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/<< parameters.image_name >>.tar
      - run:
          name: Login to DockerHub
          command: echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin
      - run:
          name: Push Docker image(s)
          command: |
            set -e
            for tag in $(echo "<< parameters.comma_separated_tags >>" | sed "s/,/ /g");
            do
              set -x
              # If the tag looks starts with "v" then a digit, remove the "v"
              pattern="^(v[0-9].*)"
              if [[ $tag =~ $pattern ]]; then
                tag="${tag:1}"
              fi
              docker tag << parameters.image_name >> << parameters.docker_repository >>/<< parameters.image_name >>:${tag}
              docker push << parameters.docker_repository >>/<< parameters.image_name >>:${tag}
              set +x
            done
  publish-github-release:
    description: "Create a release on GitHub"
    parameters:
      tag:
        type: string
        default:  "$NEXT_TAG"
      ghr_version:
        type: string
        default:  "0.13.0"
    steps:
      - run:
          name: Create a release on GitHub
          command: |
            set -xe
            # Install ghr, a CLI tool for doing GitHub releases
            WORK_DIR=$(pwd)
            cd /tmp
            wget https://github.com/tcnksm/ghr/releases/download/v<< parameters.ghr_version >>/ghr_v<< parameters.ghr_version >>_linux_amd64.tar.gz
            tar -xvf ./ghr_v<< parameters.ghr_version >>_linux_amd64.tar.gz
            mkdir -p /tmp/bin
            mv ghr_v<< parameters.ghr_version >>_linux_amd64/ghr /tmp/bin/
            export PATH=/tmp/bin:$PATH
            cd $WORK_DIR

            # Generate release notes in Markdown format
            COMMITS=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"* %ai %h: %s" | awk '{$4=""; print $0}')
            AUTHORS=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%aE" | awk '!a[$0]++')
            cat \<<EOT > /tmp/release_notes.md

            ## Changes:

            $COMMITS

            ## Authors:

            $AUTHORS
            EOT

            echo "==================="
            cat /tmp/release_notes.md
            echo "==================="

            ghr \
              -t $GITHUB_TOKEN \
              -c $CIRCLE_SHA1 \
              -n v<< parameters.tag>> \
              -b "$(cat /tmp/release_notes.md)" \
              v<< parameters.tag>>
  get-next-tag:
    description: "Set an environment variable to this release branch with an incremented patch version"
    parameters:
      docker_repository:
        type: string
        default: $DOCKER_REPO
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - run:
          name: Determine the next patch version
          command: |
            set -xe
            pip install --user astronomer_e2e_test
            NEXT_TAG=$(astronomer-next-version --branch $CIRCLE_BRANCH \
                                               --repository << parameters.docker_repository >>  \
                                               --image << parameters.image_name >>)
            # Make this environment variable available to following steps
            echo "export NEXT_TAG=${NEXT_TAG}" >> $BASH_ENV
