enum Role {
  SYSTEM_ADMIN
  SYSTEM_EDITOR
  SYSTEM_VIEWER
  WORKSPACE_ADMIN
  WORKSPACE_EDITOR
  WORKSPACE_VIEWER
  DEPLOYMENT_ADMIN
  DEPLOYMENT_EDITOR
  DEPLOYMENT_VIEWER
  USER
}

enum InviteSource {
  SYSTEM
  WORKSPACE
}

type User {
  id: ID! @id
  username: String @unique
  status: String
  fullName: String
  avatarUrl: String
  emails: [Email!]! @relation(name: "EmailToUser", onDelete: CASCADE)
  roleBindings: [RoleBinding!]! @relation(name: "RoleBindingToUser", onDelete: CASCADE)
  localCredential: LocalCredential @relation(name: "LocalCredentialToUser", onDelete: CASCADE, link: INLINE)
  oauthCredentials: [OAuthCredential!]! @relation(name: "OAuthCredentialToUser", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

# Ideally this type uses a union type once prisma supports it.
# subject: User | ServiceAccount
# principal: Workspace | Deployment
# https://github.com/prisma/prisma/issues/165
type RoleBinding {
  id: ID! @id
  role: Role
  user: User @relation(name: "RoleBindingToUser")
  serviceAccount: ServiceAccount @relation(name: "RoleBindingToServiceAccount", link: INLINE)
  workspace: Workspace @relation(name: "RoleBindingToWorkspace")
  deployment: Deployment @relation(name: "DeploymentRoleBindings")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Email {
  id: ID! @id
  address: String @unique
  primary: Boolean
  token: String @unique
  user: User @relation(name: "EmailToUser")
  verified: Boolean
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type LocalCredential {
  id: ID! @id
  user: User @relation(name: "LocalCredentialToUser")
  password: String
  resetToken: String @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type OAuthCredential {
  id: ID! @id
  expiresAt: DateTime
  oauthProvider: String!
  oauthUserId: String!
  user: User @relation(name: "OAuthCredentialToUser")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type InviteToken {
  # Multi-column unique fields would be nice, but not supported yet
  # https://github.com/prisma/prisma/issues/3405
  id: ID! @id
  email: String!
  token: String! @unique
  source: InviteSource!

  # Optional. If one is specified both should be
  workspace: Workspace
  role: Role

  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ServiceAccount {
  id: ID! @id
  apiKey: String @unique
  label: String
  category: String
  active: Boolean
  roleBinding: RoleBinding @relation(name: "RoleBindingToServiceAccount", onDelete: CASCADE)
  lastUsedAt: DateTime
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Workspace {
  id: ID! @id
  deployments: [Deployment!]!
  description: String
  invites: [InviteToken!]!
  label: String
  roleBindings: [RoleBinding!]! @relation(name: "RoleBindingToWorkspace", onDelete: CASCADE)
  stripeCustomerId: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  isSuspended: Boolean
  trialEndsAt: DateTime
}

type Deployment {
  id: ID! @id
  config: Json
  description: String
  label: String
  registryPassword: String
  elasticsearchPassword: String
  releaseName: String @unique
  version: String
  extraAu: Int
  airflowVersion: String
  alertEmails: [String!] @scalarList(strategy: RELATION)
  roleBindings: [RoleBinding!]! @relation(name: "DeploymentRoleBindings", onDelete: CASCADE)
  workspace: Workspace
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  deletedAt: DateTime
  images: [DockerImage!] @relation(name: "DeploymentDockerImages", onDelete: CASCADE)
  canary: Boolean
}

type DockerImage {
  id: ID! @id
  # Even though we only "need" the tag, to make it a unique string that we can
  # create/update by we include repository in this too.
  name: String @unique
  labels: Json!
  env: Json!
  tag: String!
  digest: String!
  deployment: Deployment! @relation(name: "DeploymentDockerImages")
  createdAt: DateTime! @createdAt
}

type PlatformRelease {
  id: ID! @id
  version: String @unique
  url: String
  description: String
  level: String
  releaseDate: DateTime!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}
